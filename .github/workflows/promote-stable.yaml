name: Promote Stable

concurrency:
  group: promote-stable
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Release tag to promote (leave empty to use latest published release)
        required: false
        default: ""
        type: string
  release:
    types:
      - published
      - released
      - prereleased

jobs:
  build:
    name: Build esctl
    permissions:
      contents: read
    outputs:
      promotion_ref: ${{ steps.resolve-tag.outputs.tag }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - name: Determine release tag
        id: resolve-tag
        run: |
          set -euo pipefail
          if [ -n "${RELEASE_TAG}" ]; then
            tag="${RELEASE_TAG}"
          elif [ -n "${INPUT_TAG}" ]; then
            tag="${INPUT_TAG}"
          fi
          if [ -z "${tag:-}" ]; then
            tag="$(
              curl -fsSL \
                -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" \
              | python -c 'import json,sys; print(json.load(sys.stdin)["tag_name"])'
            )"
          fi
          if [ -z "${tag:-}" ]; then
            echo "Unable to determine the release tag to promote." >&2
            exit 1
          fi
          echo "PROMOTION_REF=${tag}" >> "$GITHUB_ENV"
          echo "tag=${tag}" >> "$GITHUB_OUTPUT"
        env:
          RELEASE_TAG: ${{ github.event_name == 'release' && github.event.release.tag_name || '' }}
          INPUT_TAG: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || '' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ env.PROMOTION_REF }}

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup magic nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        with:
          use-flakehub: false

      - name: Build esctl
        run: |
          nix build .

  push-stable:
    name: Push stable branch
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      PROMOTION_REF: ${{ needs.build.outputs.promotion_ref }}
    steps:
      - name: Checkout release commit
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ env.PROMOTION_REF }}
          persist-credentials: false

      - name: Configure Git
        env:
          CI_PAT: ${{ secrets.PAT_HAPPN_CI_ESCTL_WRITE }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          set -euo pipefail
          if [ -z "${CI_PAT}" ]; then
            echo "Missing PAT_HAPPN_CI_ESCTL_WRITE secret." >&2
            exit 1
          fi
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config --global credential.helper ""
          git config --global --unset-all http.https://github.com/.extraheader || true
          git config --unset-all http.https://github.com/.extraheader || true
          cat <<EOF > ~/.netrc
            machine github.com
              login x-access-token
              password ${CI_PAT}
            EOF
          chmod 600 ~/.netrc

      - name: Push release commit to stable branch
        env:
          GIT_ASKPASS: /bin/true
        run: |-
          git fetch origin stable || true
          git checkout -B stable
          git push origin stable
