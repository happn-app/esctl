name: Auto Releases

on:
  push:
    branches:
      - master
    paths:
      - .github/workflows/push-auto-release.yaml
      - pyproject.toml
  workflow_dispatch: {}

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check.outputs.version }}
      skip: ${{ steps.check.outputs.skip }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: üèó Set up yq
        uses: frenck/action-setup-yq@v1.0.2
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v7.1.0
        with:
          enable-cache: true

      - name: Check pyproject.toml version is higher than latest git tag
        id: check
        shell: bash
        run: |
          # Shamelessly copied from
          # https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash
          # Adapted to echo the result, and not return it as exit code (cause it breaks the step)
          vercomp () {
              if [[ $1 == $2 ]]
              then
                  echo "0"
                  return 0
              fi
              local IFS=.
              local i ver1=($1) ver2=($2)
              # fill empty fields in ver1 with zeros
              for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
              do
                  ver1[i]=0
              done
              for ((i=0; i<${#ver1[@]}; i++))
              do
                  if ((10#${ver1[i]:=0} > 10#${ver2[i]:=0}))
                  then
                      echo ">"
                      return 0
                  fi
                  if ((10#${ver1[i]} < 10#${ver2[i]}))
                  then
                      echo "<"
                      return 0
                  fi
              done
              return 0
          }
          version=$(yq -r '.project.version' pyproject.toml)
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) | cut -c2-)
          changes=$(git log v$latest_tag..HEAD --pretty=format:'- %s (%an)' | sed 's/-/  -/' | sed 's|\n|\n\n|g')
          echo "Current version: $version"
          echo "Latest tag: $latest_tag"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo 'changes<<EOF' >> $GITHUB_OUTPUT
          echo $changes >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo "Checking if $version > $latest_tag"
          if [[ $(vercomp $version $latest_tag) == '>' ]]; then
            echo "New version to release"
            echo "skip=0" >> $GITHUB_OUTPUT
          else
            echo "No new version to release"
            echo "skip=1" >> $GITHUB_OUTPUT
          fi
          exit 0

      - name: Run uv build
        if: steps.check.outputs.skip == '0'
        run: |
          uv build
          cp dist/esctl-*.tar.gz dist/esctl-latest.tar.gz
          cp dist/esctl-*.whl dist/esctl-latest.whl

      - name: Create new GitHub Release
        if: steps.check.outputs.skip == '0'
        uses: ncipollo/release-action@v1.20.0
        with:
          tag: v${{ steps.check.outputs.version }}
          name: v${{ steps.check.outputs.version }}
          commit: ${{ github.sha }}
          body: |
            ## Changes since ${{ steps.check.outputs.latest_tag }}
            ${{ steps.check.outputs.latest_tag }}...${{ steps.check.outputs.version }}
            ${{ steps.check.outputs.changes }}
          draft: false
          prerelease: false
          artifacts: dist/*

  docker:
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.skip == '0'
    strategy:
      matrix:
        python-version: [ "3.11", "3.12", "3.13", "3.14" ]
        info:
          - dockerfile: Dockerfile.alpine
            suffix: alpine
            os_version: ""
          - dockerfile: Dockerfile.debian
            suffix: bookworm
            os_version: bookworm
          - dockerfile: Dockerfile.debian
            suffix: trixie
            os_version: trixie
          - dockerfile: Dockerfile.debian
            suffix: bookworm-slim
            os_version: bookworm-slim
          - dockerfile: Dockerfile.debian
            suffix: trixie-slim
            os_version: trixie-slim

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v5

      - name: üêô Log in to GitHub Container Registry
        uses: docker/login-action@v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: üê≥ Build and push Docker image
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: ./${{ matrix.info.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/happn-app/esctl:${{ needs.release.outputs.version }}-py${{ matrix.python-version }}-${{ matrix.info.suffix }}
          build-args: |
            OS_VERSION=${{ matrix.info.os_version }}
            GIT_REV=${{ github.sha }}
            CREATED_AT=${{ github.event.head_commit.timestamp }}
            PYTHON_VERSION=${{ matrix.python-version }}
